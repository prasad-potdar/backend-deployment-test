// pipeline {
//     agent { label env.DEPLOYMENT_ENV }

//     environment {
//         NODE_OPTIONS = "--max-old-space-size=8192"
//         NVM_DIR = "$HOME/.nvm"
//     }

//     stages {
//         stage('Run Tests') {
//             steps {
//                 sh '''
//                     echo "Checking if NVM is installed..."
//                     if [ ! -s "$NVM_DIR/nvm.sh" ]; then
//                         echo "NVM not found. Installing NVM..."
//                         curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
//                         [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
//                         echo "NVM installed successfully."
//                     else
//                         echo "NVM is already installed."
//                         [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
//                     fi

//                     echo "Checking Node.js version..."
//                     if ! nvm use 20.9.0; then
//                         echo "Node.js 20.9.0 not installed. Installing Node.js 20.9.0..."
//                         nvm install 20.9.0
//                     fi
//                     nvm use 20.9.0
//                     echo "Node.js version:"
//                     node -v

//                     pnpm install
//                     rm -f jest_html_reporters.html

//                     # Running tests with dotenv environment variables
//                     pnpm test:e2e --json --unhandled-rejections=strict --outputFile='e2e-test-results.json' $TEST_SUITE
//                 '''
//             }
//         }
//     }

//     post {
//         always {
//             sh '''
//                 [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
//                 nvm use 20.9.0
//                 node jest-result-processor.js

//                 # Organize and archive reports
//                 rm -rf reports
//                 mkdir reports
//                 mv jest_html_reporters.html ./reports
//             '''
//             allure([
//                 includeProperties: false,
//                 reportBuildPolicy: 'ALWAYS',
//                 results: [[path: 'allure-results']]
//             ])
//             publishHTML(target: [
//                 allowMissing: true,
//                 alwaysLinkToLastBuild: true,
//                 keepAll: true,
//                 reportDir: 'jest-stare',
//                 reportFiles: 'index.html',
//                 reportName: "Jest Stare"
//             ])
//             publishHTML(target: [
//                 allowMissing: true,
//                 alwaysLinkToLastBuild: true,
//                 keepAll: true,
//                 reportDir: 'reports',
//                 reportFiles: 'jest_html_reporters.html',
//                 reportName: "E2E Report"
//             ])
//         }
//         aborted {
//             echo "E2E Tests aborted."
//         }
//         success {
//             echo "E2E Tests completed successfully."
//         }
//         unstable {
//             echo "E2E Tests encountered issues but completed."
//         }
//         failure {
//             echo "E2E Tests failed! Please check the logs."
//         }
//     }
// }

pipeline {
    agent any

    environment {
        NODE_VERSION = '16.x'  // Set the desired Node.js version
        NVM_DIR = "$HOME/.nvm" // Directory for NVM
        NODE_OPTIONS = "--max-old-space-size=8192" // Optional: Increase the max memory for Node.js processes
    }

    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    // Install Node.js version using NVM if necessary
                    echo "Checking if NVM is installed..."
                    if (!fileExists("$NVM_DIR/nvm.sh")) {
                        echo "NVM not found. Installing NVM..."
                        sh 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash'
                    }

                    echo "Loading NVM..."
                    sh '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"'

                    // Install the required Node.js version using NVM
                    echo "Checking Node.js version..."
                    sh '''
                    if ! nvm use $NODE_VERSION; then
                        echo "Node.js $NODE_VERSION not installed. Installing Node.js $NODE_VERSION..."
                        nvm install $NODE_VERSION
                    fi
                    nvm use $NODE_VERSION
                    node -v
                    '''
                    
                    // Install project dependencies using pnpm
                    sh 'pnpm install'
                }
            }
        }

        stage('Run Jest Tests') {
            steps {
                script {
                    // Run Jest tests with the necessary flags
                    echo "Running Jest tests..."
                    sh 'pnpm run test -- --ci --verbose' // Adjust this command if necessary
                }
            }
        }
    }

    post {
        always {
            // Always execute this block, regardless of build result
            echo 'Cleaning up...'
            sh 'rm -f jest_html_reporters.html'

            // Move any reports to a dedicated directory
            sh 'mkdir -p reports && mv jest_html_reporters.html ./reports'

            // Optionally, process Jest results (e.g., using Jest result processor)
            sh 'node jest-result-processor.js'
        }

        success {
            echo 'Jest tests completed successfully!'
        }

        failure {
            echo 'Jest tests failed! Check the logs for more details.'
        }

        unstable {
            echo 'Jest tests completed with some issues but not critical.'
        }

        aborted {
            echo 'Jest tests were aborted.'
        }
    }
}
