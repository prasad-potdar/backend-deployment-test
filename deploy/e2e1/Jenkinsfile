pipeline {
    agent any

    environment {
        NODEJS_HOME = tool 'NodeJS'
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
        REPORT_DIR = "${WORKSPACE}/reports"
    }

    stages {
        stage("Install Node and Dependencies") {
            steps {
                script {
                    sh 'pnpm install'
                }
            }
        }

        stage("Prepare Test Batches") {
            steps {
                script {
                    echo "Collecting all test files..."
                    def testFiles = sh(
                        script: "find ${WORKSPACE}/test -name '*.e2e-spec.ts'",
                        returnStdout: true
                    ).trim().split("\n").findAll { it }

                    if (testFiles.isEmpty()) {
                        error "❌ No E2E test files found!"
                    }

                    int batchSize = 3
                    int batchCount = (testFiles.size() / batchSize) + ((testFiles.size() % batchSize) > 0 ? 1 : 0)

                    echo "Total Test Files: ${testFiles.size()}, Batches: ${batchCount}, Batch Size: ${batchSize}"

                    script {
                        testBatchData = [testFiles: testFiles, batchSize: batchSize]
                    }
                }
            }
        }

        stage("Run Test Batches") {
            steps {
                script {
                    sh "mkdir -p ${REPORT_DIR}"  // Ensure report directory exists

                    def testFiles = testBatchData.testFiles
                    int batchSize = testBatchData.batchSize
                    def parallelStages = [:]

                    // Initialize counts
                    int totalTests = 0
                    int totalPassed = 0
                    int totalFailed = 0

                    int numBatches = (testFiles.size() / batchSize) + ((testFiles.size() % batchSize) > 0 ? 1 : 0)

                    echo "Running ${numBatches} batches of tests..."

                    for (int i = 0; i < numBatches; i++) {
                        int start = i * batchSize
                        int end = Math.min((i + 1) * batchSize, testFiles.size())
                        def batchFiles = testFiles[start..<end].join(' ')
                        def batchReportDir = "${REPORT_DIR}/batch-${i + 1}"  // Unique report directory
                        def batchJsonReport = "${batchReportDir}/jest-results.json"

                        parallelStages["Batch-${i + 1}"] = {
                            script {
                                echo "Running Batch ${i + 1} with files: ${batchFiles}"

                               sh """
                                    mkdir -p '${batchReportDir}'
                                    export JEST_REPORT_DIR='${batchReportDir}'
                                    pnpm test:e2e --testPathPattern='${batchFiles.replaceAll(' ', '|')}' --json --outputFile='${batchJsonReport}'
                                """

                                // Extract Test Summary
                                def batchResults = sh(
                                    script: """
                                        total=\$(grep -o '"numTotalTests":[0-9]*' '${batchJsonReport}' | awk -F ':' '{print \$2}')
                                        passed=\$(grep -o '"numPassedTests":[0-9]*' '${batchJsonReport}' | awk -F ':' '{print \$2}')
                                        failed=\$(grep -o '"numFailedTests":[0-9]*' '${batchJsonReport}' | awk -F ':' '{print \$2}')
                                        echo "\${total} \${passed} \${failed}"
                                    """,
                                    returnStdout: true
                                ).trim().split(' ')

                                synchronized (this) {
                                    totalTests += batchResults[0].toInteger()
                                    totalPassed += batchResults[1].toInteger()
                                    totalFailed += batchResults[2].toInteger()
                                }
                            }
                        }
                    }

                    parallel parallelStages

                    // Store final counts in script scope
                    script {
                        testSummary = [totalTests: totalTests, totalPassed: totalPassed, totalFailed: totalFailed]
                    }
                }
            }
        }
    }

    post {
        always {
            echo "📊 Test Execution Summary:"
            echo "🔹 Total Tests: ${testSummary.totalTests}"
            echo "✅ Passed: ${testSummary.totalPassed}"
            echo "❌ Failed: ${testSummary.totalFailed}"
        }

        success {
            echo "✅ E2E Tests completed successfully!"
        }

        unstable {
            echo "⚠️ E2E Tests encountered issues but completed."
        }

        failure {
            echo "❌ E2E Tests failed! Check logs."
        }
    }
}
