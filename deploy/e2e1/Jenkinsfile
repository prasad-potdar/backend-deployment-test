pipeline {
    agent any

    environment {
        NODEJS_HOME = tool 'NodeJS'
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
        REPORT_DIR = "${WORKSPACE}/reports"
    }

    stages {
        stage("Install Dependencies") {
            steps {
                script {
                    sh 'pnpm install --frozen-lockfile'
                }
            }
        }

        stage("Prepare Test Batches") {
            steps {
                script {
                    echo "Collecting all test files..."
                    def testFiles = sh(
                        script: "find ${WORKSPACE}/test -name '*.e2e-spec.ts'",
                        returnStdout: true
                    ).trim().split("\n").findAll { it }

                    if (testFiles.isEmpty()) {
                        error "‚ùå No E2E test files found!"
                    }

                    int batchSize = 3
                    int numBatches = (testFiles.size() + batchSize - 1) / batchSize

                    echo "Total Test Files: ${testFiles.size()}, Batches: ${numBatches}, Batch Size: ${batchSize}"
                    
                    env.TEST_FILES_CSV = testFiles.join(',')
                    env.BATCH_SIZE = batchSize.toString()
                    env.NUM_BATCHES = numBatches.toString()
                }
            }
        }

        stage("Run Test Batches") {
            steps {
                script {
                    sh "mkdir -p ${REPORT_DIR}"
                    def testFiles = env.TEST_FILES_CSV.split(',')
                    int batchSize = env.BATCH_SIZE.toInteger()
                    int numBatches = env.NUM_BATCHES.toInteger()
                    def parallelStages = [:]

                    echo "Running ${numBatches} batches of tests..."

                    for (int i = 0; i < numBatches; i++) {
                        int start = i * batchSize
                        int end = Math.min(start + batchSize, testFiles.size())
                        def batchFiles = testFiles[start..<end].join(' ')
                        def batchReportDir = "${REPORT_DIR}/batch-${i + 1}"
                        def batchJsonReport = "${batchReportDir}/jest-results.json"

                        parallelStages["Batch-${i + 1}"] = {
                            script {
                                echo "Running Batch ${i + 1} with files: ${batchFiles}"
                                sh """
                                    mkdir -p '${batchReportDir}'
                                    export JEST_REPORT_DIR='${batchReportDir}'
                                    pnpm test:e2e --testPathPattern='${batchFiles.replaceAll(' ', '|')}' --json --outputFile='${batchJsonReport}'
                                """
                            }
                        }
                    }

                    parallel parallelStages
                }
            }
        }
    }

    post {
        always {
            script {
                sh "ls -lhR ${REPORT_DIR} || echo '‚ùå No reports found!'"
                // archiveArtifacts artifacts: 'reports/**', fingerprint: true
                
                def jenkinsBaseUrl = env.BUILD_URL
                int totalPassed = 0, totalFailed = 0, totalPending = 0
                int totalTestSuites = 0, totalPassedTestSuites = 0, totalFailedTestSuites = 0, totalRuntimeErrors = 0, totalTestFiles = 0
                int numBatches = env.NUM_BATCHES.toInteger()

                for (int i = 1; i <= numBatches; i++) {
                    def reportPath = "reports/batch-${i}/jest_report.html"
                    publishHTML([
                        reportName: "E2E Test Report - Batch ${i}",
                        reportDir: "reports/batch-${i}",
                        reportFiles: 'jest_report.html',
                        alwaysLinkToLastBuild: true,
                        keepAll: true
                    ])
                    echo "üîó Report for Batch ${i}: ${jenkinsBaseUrl}artifact/${reportPath}"

                    def batchJsonReport = "${REPORT_DIR}/batch-${i}/jest-results.json"
                    if (fileExists(batchJsonReport)) {
                        echo "üìÇ Processing report: ${batchJsonReport}"
                        def jsonContent = readJSON text: readFile(batchJsonReport)
                        totalPassed += jsonContent.numPassedTests
                        totalFailed += jsonContent.numFailedTests
                        totalPending += jsonContent.numPendingTests
                        totalTestSuites += jsonContent.numTotalTestSuites
                        totalPassedTestSuites += jsonContent.numPassedTestSuites
                        totalFailedTestSuites += jsonContent.numFailedTestSuites
                        totalRuntimeErrors += jsonContent.numRuntimeErrorTestSuites
                        totalTestFiles += jsonContent.testResults.size()
                    } else {
                        echo "‚ö†Ô∏è Warning: Report file not found for Batch ${i}"
                    }
                }

                echo "üìä **E2E Test Summary**"
                echo "‚úÖ Total Passed Tests: ${totalPassed}"
                echo "‚ùå Total Failed Tests: ${totalFailed}"
                echo "‚è≥ Total Pending Tests: ${totalPending}"
                echo "üóÇÔ∏è Total Test Suites: ${totalTestSuites}"
                echo "üü¢ Passed Test Suites: ${totalPassedTestSuites}"
                echo "üî¥ Failed Test Suites: ${totalFailedTestSuites}"
                echo "üí• Runtime Errors: ${totalRuntimeErrors}"
                echo "üìÇ Total Test Files Executed: ${totalTestFiles}"
            }
        }

        success {
            echo "‚úÖ E2E Tests completed successfully!"
        }

        unstable {
            echo "‚ö†Ô∏è E2E Tests encountered issues but completed."
        }

        failure {
            echo "‚ùå E2E Tests failed! Check logs."
        }
    }
}
