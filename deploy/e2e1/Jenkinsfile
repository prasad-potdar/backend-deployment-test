pipeline {
    agent any

    environment {
        NODEJS_HOME = tool 'NodeJS'
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
        REPORT_DIR = "${WORKSPACE}/reports"
    }

    stages {
        stage("Install Node and Dependencies") {
            steps {
                script {
                    sh 'pnpm install'
                }
            }
        }

        stage("Prepare Test Batches") {
            steps {
                script {
                    echo "Collecting all test files..."

                    // Get list of all test files dynamically and store as a comma-separated string
                    def testFiles = sh(
                        script: "find ${WORKSPACE}/test -name '*.e2e-spec.ts'",
                        returnStdout: true
                    ).trim().split("\n").findAll { it }

                    int batchSize = 3
                    int batchCount = (testFiles.size() / batchSize) + ((testFiles.size() % batchSize) > 0 ? 1 : 0)

                    echo "Total Test Files Found: ${testFiles.size()}"
                    echo "Batch Size: ${batchSize}, Number of Batches: ${batchCount}"

                    env.TEST_FILES_CSV = testFiles.join(',')
                    env.BATCH_SIZE = batchSize.toString()
                }
            }
        }

        stage("Run Test Batches") {
            parallel {
                stage("Batch Execution") {
                    steps {
                        script {
                            def testFiles = env.TEST_FILES_CSV.split(',')
                            int batchSize = env.BATCH_SIZE.toInteger()

                            // def parallelStages = [:]
                            int numBatches = testFiles.size() / batchSize + (testFiles.size() % batchSize > 0 ? 1 : 0)

                            for (int i = 0; i < numBatches; i++) {
                                int start = i * batchSize
                                int end = Math.min((i + 1) * batchSize, testFiles.size())
                                def batchFiles = testFiles[start..<end].join(' ')

                                // parallelStages["Batch-${i + 1}"] = {
                                //     stage("Batch-${i + 1}") {
                                //         steps {
                                            echo "Running Batch ${i + 1} with files:\n${batchFiles}"
                                            // sh """
                                            //     pnpm jest --testPathPattern="${batchFiles}" --reporters=jest-html-reporters --reporterOptions="publicPath=${REPORT_DIR}, filename=batch-${i + 1}-report.html"
                                            // """
                                //         }
                                //     }
                                // }
                            }
                            // parallel parallelStages
                        }
                    }
                }
            }
        }

        // stage("Generate Combined Report") {
        //     steps {
        //         script {
        //             echo "Generating combined Jest E2E report"
        //             sh """
        //                 pnpm jest --reporters=jest-html-reporters --reporterOptions="publicPath=${REPORT_DIR}, filename=combined-e2e-report.html"
        //             """
        //         }
        //     }
        // }
    }

    post {
        always {
            script {
                echo "Publishing Jest E2E Report"
                // publishHTML(target: [
                //     reportDir: "${REPORT_DIR}",
                //     reportFiles: 'combined-e2e-report.html',
                //     reportName: "Combined E2E Report",
                //     alwaysLinkToLastBuild: true,
                //     allowMissing: true,
                //     keepAll: true,
                //     escapeUnderscores: false,
                // ])
            }
        }

        aborted {
            echo "E2E Tests aborted."
        }

        success {
            echo "E2E Tests completed successfully."
        }

        unstable {
            echo "E2E Tests encountered issues but completed."
        }

        failure {
            echo "E2E Tests failed! Please check the logs."
        }
    }
}
